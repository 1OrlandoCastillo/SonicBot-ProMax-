/* Githubsearch By Jose XrL
- Free Codes Titan
- https://whatsapp.com/channel/0029ValMlRS6buMFL9d0iQ0S
*/

// *„Äêüîç„ÄëGithubsearch*

import fetch from 'node-fetch';

let handler = async (m, { text, command, usedPrefix }) => {
  if (!text) return conn.reply(m.chat, 'üç¨ Por favor ingresa un nombre de un repositorio GitHub.`, m, rcanal);
  
  await m.react('üïì');

  try {
    const res = await fetch(global.API('https://api.github.com', '/search/repositories', {
      q: text
    }));
    
    const json = await res.json();
    if (res.status !== 200) throw json;

    if (json.items.length > 0) {
      let txt = '`‰πÇ  G I T H U B  -  B √ö S Q U E D A`\n\n';
      
      json.items.forEach((repo, i) => {
        txt += `    ‚ú©  *Nro* : ${i + 1}\n`;
        txt += `    ‚ú©  *Nombre del Repositorio* : ${repo.full_name}\n`;
        txt += `    ‚ú©  *URL* : ${repo.html_url}\n`;
        txt += `    ‚ú©  *Creado en* : ${formatDate(repo.created_at)}\n`;
        txt += `    ‚ú©  *√öltima actualizaci√≥n* : ${formatDate(repo.updated_at)}\n`;
        txt += `    ‚ú©  *Watchers* : ${repo.watchers}\n`;
        txt += `    ‚ú©  *Forks* : ${repo.forks}\n`;
        txt += `    ‚ú©  *Estrellas* : ${repo.stargazers_count}\n`;
        txt += `    ‚ú©  *Issues Abiertos* : ${repo.open_issues}\n`;
        txt += `    ‚ú©  *Descripci√≥n* : ${repo.description || 'Sin descripci√≥n'}\n`;
        txt += `    ‚ú©  *Clone* : ${repo.clone_url}\n\n`;
        txt += `> ${dev}`;
      });
      
      await m.reply(txt);
      await m.react('‚úÖ');
    } else {
      await m.react('‚úñÔ∏è');
      await m.reply('üç≠ No se encontraron repositorios para esta b√∫squeda.', m);
    }
  } catch (error) {
    console.error(error);
    await m.react('‚úñÔ∏è');
    await m.reply('‚ö†Ô∏è Hubo un error al procesar la solicitud. Intenta de nuevo m√°s tarde.', m);
  }
}

handler.tags = ['internet'];
handler.help = ['githubsearch *<b√∫squeda>*'];
handler.command = ['githubsearch', 'gbsearch'];
handler.register = true;

export default handler;

function formatDate(dateString) {
  const options = { year: 'numeric', month: 'short', day: 'numeric' };
  return new Date(dateString).toLocaleDateString(undefined, options);
}
